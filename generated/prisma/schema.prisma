generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model assignments {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  description String
  course_id   Int?
  due_date    DateTime @db.Date
  max_score   Int
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
}

model batches {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  start_date  DateTime  @db.Timestamp(6)
  end_date    DateTime  @db.Timestamp(6)
  fee         Decimal   @db.Decimal(10, 2)
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  trainer_id  Int?
  capacity    Int?
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  tenant_id   Int?
  tenants     tenants?  @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users?    @relation(fields: [trainer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "batches_trainer_id_users_id_fk")
}

model code_snippets {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  language    String   @db.VarChar(50)
  code        String
  description String?
  user_id     Int?
  course_id   Int?
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
}

model courses {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  description String?
  duration    Int
  batch_id    Int?
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  tenant_id   Int?
  tenants     tenants? @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model follow_up_comments {
  id           Int        @id @default(autoincrement())
  follow_up_id Int
  comment      String
  created_by   Int?
  created_at   DateTime   @default(now()) @db.Timestamp(6)
  users        users?     @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  follow_ups   follow_ups @relation(fields: [follow_up_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model follow_ups {
  id                                  Int                  @id @default(autoincrement())
  lead_id                             Int
  follow_up_date                      DateTime             @db.Date
  comments                            String?
  status                              String               @default("pending") @db.VarChar(50)
  assigned_to                         Int?
  created_by                          Int?
  is_completed                        Boolean?             @default(false)
  completed_at                        DateTime?            @db.Timestamp(6)
  created_at                          DateTime             @default(now()) @db.Timestamp(6)
  updated_at                          DateTime             @default(now()) @db.Timestamp(6)
  type                                String               @default("Call") @db.VarChar(50)
  next_follow_up_date                 DateTime?            @db.Date
  tenant_id                           Int?
  follow_up_comments                  follow_up_comments[]
  users_follow_ups_assigned_toTousers users?               @relation("follow_ups_assigned_toTousers", fields: [assigned_to], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_follow_ups_created_byTousers  users?               @relation("follow_ups_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  leads                               leads                @relation(fields: [lead_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants                             tenants?             @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model leads {
  id          Int          @id @default(autoincrement())
  name        String
  phone       String
  email       String?
  source      String
  status      lead_status  @default(new)
  notes       String?
  assigned_to Int?
  created_at  DateTime?    @default(now()) @db.Timestamp(6)
  updated_at  DateTime?    @default(now()) @db.Timestamp(6)
  course      String?      @db.VarChar(100)
  tenant_id   Int?
  follow_ups  follow_ups[]
  tenants     tenants?     @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model lesson_plans {
  id          Int      @id @default(autoincrement())
  course_id   Int
  title       String   @db.VarChar(100)
  content     String
  week_number Int
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
}

model password_reset_tokens {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  user_id    Int
  expires_at DateTime @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
  is_used    Boolean  @default(false)
  tenant_id  Int?
  tenants    tenants? @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model payments {
  id                    Int            @id @default(autoincrement())
  student_id            Int
  amount                Decimal        @db.Decimal(10, 2)
  payment_date          DateTime       @db.Timestamp(6)
  payment_method        payment_method
  receipt_number        String?
  transaction_id        String?
  notes                 String?
  created_at            DateTime?      @default(now()) @db.Timestamp(6)
  reference             String?        @default("")
  next_payment_due_date DateTime?      @db.Date
  tenant_id             Int?
  status                String?        @default("Completed") @db.VarChar(20)
  tenants               tenants?       @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sessions {
  sid    String   @id(map: "session_pkey") @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model settings {
  id         Int      @id @default(autoincrement())
  tenant_id  Int
  key        String   @db.VarChar(50)
  value      String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  tenants    tenants  @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([tenant_id, key])
}

model students {
  id                     Int       @id @default(autoincrement())
  name                   String
  phone                  String    @unique
  email                  String    @unique
  parent_mobile          String?
  batch_id               Int
  enrollment_date        DateTime  @db.Timestamp(6)
  total_fee              Decimal   @db.Decimal(10, 2)
  fee_paid               Decimal   @default(0) @db.Decimal(10, 2)
  fee_due                Decimal   @db.Decimal(10, 2)
  is_active              Boolean?  @default(true)
  converted_from_lead_id Int?
  notes                  String?
  created_at             DateTime? @default(now()) @db.Timestamp(6)
  updated_at             DateTime? @default(now()) @db.Timestamp(6)
  tenant_id              Int?
  user_id                Int?
  tenants                tenants?  @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                  users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

model tenants {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(100)
  subdomain             String                  @unique @db.VarChar(50)
  active                Boolean                 @default(true)
  created_at            DateTime                @default(now()) @db.Timestamp(6)
  updated_at            DateTime                @default(now()) @db.Timestamp(6)
  batches               batches[]
  courses               courses[]
  follow_ups            follow_ups[]
  leads                 leads[]
  password_reset_tokens password_reset_tokens[]
  payments              payments[]
  settings              settings[]
  students              students[]
  users                 users[]
}

model users {
  id                                       Int                     @id @default(autoincrement())
  username                                 String                  @unique(map: "users_username_unique") @db.VarChar(50)
  password                                 String
  email                                    String                  @db.VarChar(100)
  name                                     String                  @db.VarChar(100)
  role                                     user_role               @default(student)
  created_at                               DateTime                @default(now()) @db.Timestamp(6)
  phone                                    String?                 @db.VarChar(20)
  specialization                           String?                 @db.VarChar(100)
  bio                                      String?
  status                                   String?                 @default("active") @db.VarChar(20)
  tenant_id                                Int?
  batches                                  batches[]
  follow_up_comments                       follow_up_comments[]
  follow_ups_follow_ups_assigned_toTousers follow_ups[]            @relation("follow_ups_assigned_toTousers")
  follow_ups_follow_ups_created_byTousers  follow_ups[]            @relation("follow_ups_created_byTousers")
  password_reset_tokens                    password_reset_tokens[]
  students                                 students[]
  tenants                                  tenants?                @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum assignment_status {
  pending
  submitted
  reviewed
  approved
  rejected
}

enum lead_status {
  new
  contacted
  qualified
  dropped
  converted
}

enum payment_method {
  cash
  check
  bank_transfer
  online
  other
}

enum user_role {
  admin
  manager
  trainer
  student
}
